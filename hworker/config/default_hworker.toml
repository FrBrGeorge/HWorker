# You can use "`F_string`" string constant, which replaces with "F_string".format(**V_dict),
# where V-dict is current section dictinary expanded with {"SELF": field_name, "PARENT": parend_field_name}
[logging]
"console level" = "INFO"
"file level" = "DEBUG"

[modules]
deliver = [
    "imap",
    "git",
    "file",
]

[git]
directory = "/tmp/hworker_git"

# list of users - repos
[git.users]
# user_ID = "repo"

[imap]
host = "host"
port = 993
folder = "INBOX"
username = "username"
password = "password"
letter_limit = -1

[imap.users]
# user_ID = "mail address"

[file]
root_path = "files"

[file.users]
# user_ID = "path"

[tasks]

[tasks._default]
deliver_ID = "`{PARENT}`"               # replaces to task name
soft_deadline_delta = "open_date+6d"
hard_deadline_delta = "open_date+13d"
test_size = 1024
time_limit = 2
resource_limit = 3145728

[make]
screenreplay = false
deadline_gap = 03:00:00

# [tasks.task_ID]
# deliver_ID = "20240101/01"  # example, fill it
# open_date = "20240101"  # example, fill it
# soft_deadline = "20240108"  # example, fill it
# hard_deadline = "20240401"  # example, fill it
# time_limit = 2 # example, fill it
# resource_limit = 3145728  # optional field
# checks = [# optional field
#     "check_name_1",
#     "check_name_2",
#     "...",
# ]
# comparison_type = "exact"

[check]
directory = "/tmp/hworker_check"
user_checks = true

[formalization]
prog_name = "prog.py"
remote_name = "remote"
check_name = "check"
runtime_suffix = ["in", "out"]
validate_suffix = "py"
validator_name = "validator"
version_validator_name = "version_validator"
no_merge = ["checks", ]

[publish]
host = "0.0.0.0"
port = "8080"
course_name = "Kapibarology"
secret_cookie = "kapibara"
static_folder = "static"
url_prefix = ""
SECRET_KEY = "replace this junky text"

[score]
score_directory = "."

[depot]
database_path = "data.db"
